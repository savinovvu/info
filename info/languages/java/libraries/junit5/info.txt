1. no public for methods.

2. @DisplayName("Checks that checkParameter doesn't throw exception if condition is true")

3.  Exception exception = assertThrows(InvalidParameterException.class, () -> Checks.checkParameter(false, "test"));
        assertEquals("test", exception.getMessage(), "Exception message is not test");

4. Nested classes:

public class CityTest {
       private City city;

       @BeforeEach
       void setup() {
              city = new City("Odessa");
       }

       @Nested
       @DisplayName("Checks addStation method")
       class AddStationTest {
              @Test
              void successIfValidStation() {
                     Station station = city.addStation(TransportType.AUTO);

                     assertTrue(containsStation(city, station));
                     assertEquals(city, station.getCity());
              }

              @Test
              void throwsExceptionIfNullTransportType() {
                     assertThrows(NullPointerException.class, () -> city.addStation(null));
              }
       }

       @Nested
       @DisplayName("Checks addStation method")
       class RemoveStationTest {
              @Test
              void success() {
                     Station station = city.addStation(TransportType.AVIA);
                     city.removeStation(station);

                     assertTrue(city.getStations().isEmpty());
              }

              @Test
              void throwsExceptionIfStationNull() {
                     assertThrows(NullPointerException.class, () -> city.removeStation(null));
              }
       }

       private boolean containsStation(City city, Station station) {
              return city.getStations().contains(station);
       }
}