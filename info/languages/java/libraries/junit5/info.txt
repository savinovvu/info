1. no public for methods.

2. @DisplayName("Checks that checkParameter doesn't throw exception if condition is true")

3.  Exception exception = assertThrows(InvalidParameterException.class, () -> Checks.checkParameter(false, "test"));
        assertEquals("test", exception.getMessage(), "Exception message is not test");

4. Nested classes:

public class CityTest {
       private City city;
       @BeforeEach
       void setup() {
              city = new City("Odessa");
       }
       @Nested
       @DisplayName("Checks addStation method")
       class AddStationTest {
              @Test
              void successIfValidStation() {
                     Station station = city.addStation(TransportType.AUTO);

                     assertTrue(containsStation(city, station));
                     assertEquals(city, station.getCity());
              }

              @Test
              void throwsExceptionIfNullTransportType() {
                     assertThrows(NullPointerException.class, () -> city.addStation(null));
              }
       }
}

5. dynamic params
<dependency>
                        <groupId>org.junit.jupiter</groupId>
                        <artifactId>junit-jupiter-params</artifactId>
                        <version>5.2.0</version>
                        <scope>test</scope>
                 </dependency>

 @ParameterizedTest
        @ValueSource(ints = { 0, -1, 1_000_000 })
        public void findCityById_incorrectId_returnsEmptyOptional(int incorrectId) {
               Optional<City> foundCity = service.findCityById(incorrectId);
               assertTrue(!foundCity.isPresent());
        }

      Or

 @ParameterizedTest
        @MethodSource(methodName)
        public void findCityById_incorrectId_returnsEmptyOptional(int arg1, String arg2) {
               Optional<City> foundCity = service.findCityById(incorrectId);
               assertTrue(!foundCity.isPresent());
        }

      public static Stream<Arguments> methodName(){}